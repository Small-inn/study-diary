/**
 * Array.reduce
 * ËØ≠Ê≥ïÔºöarr.reduce(cb[, initialValue])
 * ÂèÇÊï∞Ôºö 
 *    callbackÔºö ÈíàÂØπÊØè‰∏ÄÈ°πÊâßË°åÁöÑÂáΩÊï∞
 *      acc: ÂàùÂßãÂÄº/‰∏ä‰∏ÄÊ¨°ÂõûË∞ÉËøîÂõûÁöÑÂÄº
 *      cur: ÂΩìÂâçÂÖÉÁ¥†
 *      index: ÂΩìÂâçÁ¥¢Âºï
 *      src: Ê∫êÊï∞ÊçÆ
 * 
 * ÊèèËø∞ÔºöÊñπÊ≥ïÊé•Êî∂‰∏Ä‰∏™ÂáΩÊï∞‰Ωú‰∏∫Á¥ØÂä†Âô®Ôºåreduce‰∏∫Êï∞ÁªÑ‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÂÖÉÁ¥†‰æùÊ¨°ÊâßË°åÂõûË∞ÉÂáΩÊï∞Ôºå‰∏çÂåÖÊã¨Êï∞ÁªÑ‰∏≠Ë¢´Âà†Èô§ÊàñËÄÖ‰ªéÊú™Ë¢´ËµãÂÄºÁöÑÂÖÉÁ¥†
 *    1. Â¶ÇÊûúÊ≤°ÊúâÂàùÂßãÂÄºÔºåpreÂ∞Ü‰ΩøÁî®Êï∞ÁªÑ‰∏≠ÁöÑÁ¨¨‰∏Ä‰∏™ÂÖÉÁ¥†
 *    2. Âú®Ê≤°ÊúâÂàùÂßãÂÄºÁöÑÁ©∫Êï∞ÁªÑ‰∏äË∞ÉÁî®reduceÂ∞ÜÊä•Èîô
 *    3. Âú®Ê≤°ÊúâÂàùÂßãÂÄºÁöÑ‰ªÖÊúâ‰∏Ä‰∏™ÂÖÉÁ¥†ÁöÑÊï∞ÁªÑ‰∏ä‰ΩøÁî®reduceÔºåÈÇ£‰πàcallback‰∏ç‰ºöÊâßË°åÔºåÊ≠§ÂîØ‰∏ÄÂÄºÂ∞ÜË¢´ËøîÂõû
 * 
 * **/ 

/**
 * ‰∏ãÈù¢ÁöÑreduce‰∏≠ÁöÑcallbackÊâßË°åÂá†Ê¨°Ôºü
 * 
 * 1. Â¶ÇÊûúÊ≤°ÂàùÂßãÂÄºÔºåcallbackÊâßË°å3Ê¨°Ôºå Á¨¨‰∏ÄÊ¨°ÊâßË°åpre = 1, cur = 2, index = 1
 * 2. ÊúâÂàùÂßãÂÄºÔºåcallbackÊâßË°å4Ê¨°, Á¨¨‰∏ÄÊ¨°ÊâßË°åpre = ÂàùÂßãÂÄºÔºå cur = 1, index = 0
 * **/ 
[1, 2, 3, 4].reduce((pre, cur, index, src) => {
  console.log('üç∫', pre, cur, index)
  return pre + cur
})

Array.prototype.myReduce = function(fn, initialValue) {
  if (initialValue === undefined && !this.length) {
    throw Error('myReduce of empty array with no initial value')
  }
  let result = initialValue ? initialValue : this[0]
  for (let i = initialValue ? 0 : 1; i < this.length; i++) {
    result = fn(result, this[i], i, this)
  }
  return result
}

